openapi: 3.0.0
info:
  description: auto-staging-tower API
  version: 1.0.0
  title: Auto Staging Tower API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: tower-configuration
    description: Configuration of auto-staging
  - name: repositories
    description: Operations to manage repositories used for auto-staging
  - name: environment
    description: Configuration the auto-staging environments for each repository
  - name: environment-status
    description: Status of all staging environments

paths:
  /repositories/environments/status:
    get:
      tags:
        - environment-status
      summary: Get all environments with status related informations
      operationId: getAllStatus
      security:
        - AwsSignature: []
      responses:
        '200':
          description: status results matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentStatus'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'

  '/repositories/{name}/environments/{branch}/status':
    get:
      tags:
        - environment-status
      summary: Get the status related informations for a single environment
      operationId: getSingleStatus
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository where the branch is located in
        - in: path
          name: branch
          schema:
            type: string
          required: true
          description: Name of the environment to get the status for
      responses:
        '200':
          description: status for the environment matching the criterias
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentStatus'
        '404':
          description: no environment for name or branch
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'

  /configuration:
    get:
      tags:
        - tower-configuration
      summary: Get the current Tower configuration
      operationId: getTowerConfiguration
      security:
        - AwsSignature: []
      responses:
        '200':
          description: current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TowerConfiguration'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    put:
      tags:
        - tower-configuration
      summary: Update the Tower configuration
      operationId: updateTowerConfiguration
      security:
        - AwsSignature: []
      responses:
        '200':
          description: current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TowerConfiguration'
        '400':
          description: bad input parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TowerConfiguration'
        description: Reconfigure Tower
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
  
  /repositories/environments:
    get:
      tags:
        - environment-global-config
      summary: 'Get the current default configuration for all environments of all repositories, will be overwritten by environment specific configuration'
      operationId: getGeneralEnvironmentConfiguration
      security:
        - AwsSignature: []
      responses:
        '200':
          description: current default configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralConfiguration'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    put:
      tags:
        - environment-global-config
      summary: Update the general configuration for all environments of all repositories
      operationId: updateGeneralEnvironmentConfiguration
      security:
        - AwsSignature: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralConfiguration'
      responses:
        '200':
          description: default configuration after update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralConfiguration'
        '400':
          description: bad input parameter
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'

  /repositories:
    get:
      tags:
        - repositories
      summary: Get all repositories configured in auto-staging
      operationId: getAllRepositoryConfigurations
      security:
        - AwsSignature: []
      responses:
        '200':
          description: all repositories configured in auto-staging
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    post:
      tags:
        - repositories
      summary: Add repository for auto-staging
      operationId: addRepositoryConfiguration
      security:
        - AwsSignature: []
      responses:
        '201':
          description: new repository added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          description: bad input parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryPostBody'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
  '/repositories/{name}':
    get:
      tags:
        - repositories
      summary: Get a repository with its configuration 
      operationId: getSingleRepositoryConfiguration
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository
      responses:
        '200':
          description: configuration for the repository matching the name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '404':
          description: no environment for id
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    put:
      tags:
        - repositories
      summary: Update single repository configuration
      operationId: updateSingleRepositoryConfiguration
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository
      responses:
        '200':
          description: configuration after update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          description: bad input parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryPutBody'
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    delete:
      tags:
        - repositories
      summary: Delete single repository and all included environments
      operationId: deleteSingleRepositoryConfiguration
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository
      responses:
        '204':
          description: repository removed
        '404':
          description: no repository for name found
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'

  '/repositories/{name}/environments':
    get:
      tags:
        - environment
      summary: Get all environments configured for the repository
      operationId: getAllEnvironmentsForRepository
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository
      responses:
        '200':
          description: all environments created in the repository with the provided name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Environment'
        '404':
          description: no environments for repository found
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    post:
      tags:
        - environment
      summary: Manually add environment for auto-staging
      operationId: addEnvironmentForRepository
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentPostBody'
      responses:
        '201':
          description: environment configuration after the creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: bad input parameter
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
  '/repositories/{name}/environments/{branch}':
    get:
      tags:
        - environment
      summary: Get a single environments with config and status related informations
      operationId: getSingleEnvironmentConfiguration
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository where the branch is located in
        - in: path
          name: branch
          schema:
            type: string
          required: true
          description: Name of the environment to get the configuration and status for
      responses:
        '200':
          description: environment configuration and status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '404':
          description: no environment for parameters found
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
    put:
      tags:
        - environment
      summary: Update the configuration for a single environment
      operationId: updateSingleEnvironmentConfiguration
      security:
        - AwsSignature: []
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository where the branch is located in
        - in: path
          name: branch
          schema:
            type: string
          required: true
          description: Name of the environment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentPutBody'
      responses:
        '200':
          description: environment confoguration and status after the update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: bad input parameter
      x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'

    delete:
      tags:
        - environment
      summary: Delete a single environment
      operationId: deleteSingleEnvironmentConfiguration
      security:
        - AwsSignature: []
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the repository where the branch is located in
        - in: path
          name: branch
          schema:
            type: string
          required: true
          description: Name of the environment to delete
      responses:
        '204':
          description: environment successfully deleted
        '404':
          description: no environment for parameters found
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
            
  '/webhooks/github':
    post:
      tags:
        - webhooks
      summary: Create, trigger and delete environments through GitHub webhooks
      description: For more information about the request body check (https://developer.github.com/v3/activity/events/types/). Supported events are create, delete and push.
      operationId: githubWebhook
          
      responses:
        '200':
          description: success
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
            
  '/triggers/schedule':
    post:
      tags:
        - triggers
      summary: Manually start and stop environments
      description: Manually start and stop environments through the REST endpoint
      operationId: triggerSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerSchedulePost'
          
      responses:
        '200':
          description: success
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: 'arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/${tower_lambda_arn}/invocations'
        credentials: '${tower_lambda_execution_role_arn}'
        httpMethod: POST
        responses:
          default:
            statusCode: '200'
          BAD.*:
            statusCode: '400'
          INT.*:
            statusCode: '500'
  
components:
  securitySchemes:
    AwsSignature:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "awsSigv4"

  schemas:
    TowerConfiguration:
      type: object
      properties:
        logLevel:
          type: integer
          format: int
          minimum: 1
          maximum: 4

    Repository:
      type: object
      properties:
        repository:
          type: string
        infrastructureRepoURL:
          type: string
        webhook:
          type: boolean
        filters:
          type: array
          items:
            type: string
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
              
    EnvironmentVariable:
      type: object
      properties:
        name:
          type: string
        type: 
          type: string
          enum:
            - PLAINTEXT
            - PARAMETER_STORE
        value:
          type: string

    RepositoryPostBody:
      type: object
      required:
        - repository
        - infrastructureRepoURL
        - codeBuildRoleARN
      properties:
        repository:
          type: string
        infrastructureRepoURL:
          type: string
        webhook:
          type: boolean
        filters:
          type: array
          items:
            type: string
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
    
    RepositoryPutBody:
      type: object
      required:
        - infrastructureRepoURL
        - codeBuildRoleARN
      properties:
        infrastructureRepoURL:
          type: string
        webhook:
          type: boolean
        filters:
          type: array
          items:
            type: string
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'

    Environment:
      type: object
      properties:
        repository:
          type: string
        branch:
          type: string
        infrastructureRepoURL:
          type: string
        creationDate:
          type: string
          format: int32
        status:
          type: string
          enum:
            - running
            - stopped
            - destroying
            - destroyed
            - destroying-failed
            - pending
            - ready
            - deploying
            - deployment-failed
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
            
    EnvironmentStatus:
      type: object
      properties:
        repository:
          type: string
        branch:
          type: string
        status:
          type: string
          enum:
            - running
            - stopped
            - destroying
            - destroyed
            - destroying-failed
            - pending
            - ready
            - deploying
            - deployment-failed
  
    EnvironmentPostBody:
      type: object
      required:
        - branch
      properties:
        branch:
          type: string
        infrastructureRepoURL:
          type: string
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
            
    EnvironmentPutBody:
      type: object
      required:
        - infrastructureRepoURL
        - codeBuildRoleARN
      properties:
        infrastructureRepoURL:
          type: string
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        codeBuildRoleARN:
          type: string
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'

    GeneralConfiguration:
      type: object
      properties:
        shutdownSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        startupSchedules:
          type: array
          items:
            $ref: '#/components/schemas/TimeSchedule'
        environmentVariables:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentVariable'
            
    TriggerSchedulePost:
      type: object
      required:
        - branch
        - repository
        - action
      properties:
        repository:
          type: string
        branch:
          type: string
        action:
          type: string
          enum:
            - start
            - stop
        
      
            
    TimeSchedule:
      type: object
      required:
        - cron
      properties:
        cron:
          type: string

x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
